// Code generated by ent, DO NOT EDIT.

package ent

import (
	"task-service/ent/schema"
	"task-service/ent/tag"
	"task-service/ent/task"
	"task-service/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	tagFields := schema.Tag{}.Fields()
	_ = tagFields
	// tagDescSlug is the schema descriptor for slug field.
	tagDescSlug := tagFields[0].Descriptor()
	// tag.SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	tag.SlugValidator = func() func(string) error {
		validators := tagDescSlug.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(slug string) error {
			for _, fn := range fns {
				if err := fn(slug); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tagDescDescription is the schema descriptor for description field.
	tagDescDescription := tagFields[1].Descriptor()
	// tag.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	tag.DescriptionValidator = tagDescDescription.Validators[0].(func(string) error)
	// tagDescColor is the schema descriptor for color field.
	tagDescColor := tagFields[2].Descriptor()
	// tag.DefaultColor holds the default value on creation for the color field.
	tag.DefaultColor = tagDescColor.Default.(string)
	// tag.ColorValidator is a validator for the "color" field. It is called by the builders before save.
	tag.ColorValidator = func() func(string) error {
		validators := tagDescColor.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(color string) error {
			for _, fn := range fns {
				if err := fn(color); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tagDescCreatedAt is the schema descriptor for created_at field.
	tagDescCreatedAt := tagFields[3].Descriptor()
	// tag.DefaultCreatedAt holds the default value on creation for the created_at field.
	tag.DefaultCreatedAt = tagDescCreatedAt.Default.(func() time.Time)
	// tagDescUpdatedAt is the schema descriptor for updated_at field.
	tagDescUpdatedAt := tagFields[4].Descriptor()
	// tag.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	tag.DefaultUpdatedAt = tagDescUpdatedAt.Default.(func() time.Time)
	// tag.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	tag.UpdateDefaultUpdatedAt = tagDescUpdatedAt.UpdateDefault.(func() time.Time)
	taskFields := schema.Task{}.Fields()
	_ = taskFields
	// taskDescTitle is the schema descriptor for title field.
	taskDescTitle := taskFields[0].Descriptor()
	// task.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	task.TitleValidator = taskDescTitle.Validators[0].(func(string) error)
	// taskDescStatus is the schema descriptor for status field.
	taskDescStatus := taskFields[1].Descriptor()
	// task.DefaultStatus holds the default value on creation for the status field.
	task.DefaultStatus = taskDescStatus.Default.(uint8)
	// task.StatusValidator is a validator for the "status" field. It is called by the builders before save.
	task.StatusValidator = func() func(uint8) error {
		validators := taskDescStatus.Validators
		fns := [...]func(uint8) error{
			validators[0].(func(uint8) error),
			validators[1].(func(uint8) error),
		}
		return func(status uint8) error {
			for _, fn := range fns {
				if err := fn(status); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// taskDescCreatedAt is the schema descriptor for created_at field.
	taskDescCreatedAt := taskFields[2].Descriptor()
	// task.DefaultCreatedAt holds the default value on creation for the created_at field.
	task.DefaultCreatedAt = taskDescCreatedAt.Default.(func() time.Time)
	// taskDescUpdatedAt is the schema descriptor for updated_at field.
	taskDescUpdatedAt := taskFields[3].Descriptor()
	// task.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	task.DefaultUpdatedAt = taskDescUpdatedAt.Default.(func() time.Time)
	// task.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	task.UpdateDefaultUpdatedAt = taskDescUpdatedAt.UpdateDefault.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.IDValidator is a validator for the "id" field. It is called by the builders before save.
	user.IDValidator = userDescID.Validators[0].(func(string) error)
}
